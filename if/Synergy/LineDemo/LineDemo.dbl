import System
.ifdef dblnet
import System.IO
.endc
import HPdf

namespace LineDemo

public class LineDemo

    private static method DrawLine, void
        page, @HPdfPage 
        x, float 
        y, float 
        label, string 
        endparams
    proc
        begin
            page.BeginText()
            page.MoveTextPos(x, (y - 10))
            page.ShowText(label)
            page.EndText()
            page.MoveTo(x, (y - 15))
            page.LineTo((x + 220), (y - 15))
            page.Stroke()
        end
    endmethod

    private static method DrawLine2, void
        page, @HPdfPage 
        x, float 
        y, float 
        label, string 
        endparams
    proc
        begin
            page.BeginText()
            page.MoveTextPos(x, y)
            page.ShowText(label)
            page.EndText()
            page.MoveTo((x + 30), (y - 25))
            page.LineTo((x + 160), (y - 25))
            page.Stroke()
        end
    endmethod

    private static method DrawRect, void
        page, @HPdfPage 
        x, float 
        y, float 
        label, string 
        endparams
    proc
        begin
            page.BeginText()
            page.MoveTextPos(x, (y - 10))
            page.ShowText(label)
            page.EndText()
            page.Rectangle(x, (y - 40), 220, 25)
        end
    endmethod

    public static method Main, void
        endparams
    proc
        begin
            writes(15,("libhpdf-" + HPdfDoc.HPdfGetVersion()))
            try
            begin
                data page_title, string
                data pdf, @HPdfDoc
                data font, @HPdfFont
                data page, @HPdfPage
                data tw, float
                data dash_mode1, [#]short, new short[#] {3}
                data dash_mode2, [#]short, new short[#] {3, 7}
                data dash_mode3, [#]short, new short[#] {8, 7, 2, 7}
                data x, float, 330
                data y, float, 440
                data x1, float, 430
                data y1, float, 530
                data x2, float, 480
                data y2, float, 470
                data x3, float, 480
                data y3, float, 90
                page_title = "LineDemo"
                pdf = new HPdfDoc()
                font = pdf.GetFont("Helvetica", ^null)
                page = pdf.AddPage()
                page.SetLineWidth(1)
                page.Rectangle(50, 50, (page.GetWidth() - 100), (page.GetHeight() - 110))
                page.Stroke()
                page.SetFontAndSize(font, 24)
                tw = page.TextWidth(page_title)
                page.BeginText()
                page.MoveTextPos((((page.GetWidth() - tw)) / 2), (page.GetHeight() - 50))
                page.ShowText(page_title)
                page.EndText()
                page.SetFontAndSize(font, 10)
                page.SetLineWidth(0)
                DrawLine(page, 60, 770, "line width = 0")
                page.SetLineWidth(1)
                DrawLine(page, 60, 740, "line width = 1.0")
                page.SetLineWidth(2)
                DrawLine(page, 60, 710, "line width = 2.0")
                page.SetLineWidth(1)
                page.SetDash(dash_mode1, 1)
                DrawLine(page, 60, 680, "dash_ptn=[3], phase=1 -- 2 on, 3 off, 3 on...")
                writes(15,"001")
                page.SetDash(dash_mode2, 2)
                DrawLine(page, 60, 650, "dash_ptn=[7, 3], phase=2 -- 5 on 3 off, 7 on,...")
                page.SetDash(dash_mode3, 0)
                DrawLine(page, 60, 620, "dash_ptn=[8, 7, 2, 7], phase=0")
                page.SetDash(^null, 0)
                page.SetLineWidth(30)
                page.SetRGBStroke(0, 0.5, 0)
                page.SetLineCap(HPdfLineCap.HPDF_BUTT_END)
                DrawLine2(page, 60, 570, "HPDF_BUTT_END")
                page.SetLineCap(HPdfLineCap.HPDF_ROUND_END)
                DrawLine2(page, 60, 505, "HPDF_ROUND_END")
                page.SetLineCap(HPdfLineCap.HPDF_PROJECTING_SCUARE_END)
                DrawLine2(page, 60, 440, "HPDF_PROJECTING_SCUARE_END")
                page.SetLineWidth(30)
                page.SetRGBStroke(0, 0, 0.5)
                page.SetLineJoin(HPdfLineJoin.HPDF_MITER_JOIN)
                page.MoveTo(120, 300)
                page.LineTo(160, 340)
                page.LineTo(200, 300)
                page.Stroke()
                page.BeginText()
                page.MoveTextPos(60, 360)
                page.ShowText("HPDF_MITER_JOIN")
                page.EndText()
                page.SetLineJoin(HPdfLineJoin.HPDF_ROUND_JOIN)
                page.MoveTo(120, 195)
                page.LineTo(160, 235)
                page.LineTo(200, 195)
                page.Stroke()
                page.BeginText()
                page.MoveTextPos(60, 255)
                page.ShowText("HPDF_ROUND_JOIN")
                page.EndText()
                page.SetLineJoin(HPdfLineJoin.HPDF_BEVEL_JOIN)
                page.MoveTo(120, 90)
                page.LineTo(160, 130)
                page.LineTo(200, 90)
                page.Stroke()
                page.BeginText()
                page.MoveTextPos(60, 150)
                page.ShowText("HPDF_BEVEL_JOIN")
                page.EndText()
                page.SetLineWidth(2)
                page.SetRGBStroke(0, 0, 0)
                page.SetRGBFill(0.75, 0, 0)
                DrawRect(page, 300, 770, "Stroke")
                page.Stroke()
                DrawRect(page, 300, 720, "Fill")
                page.Fill()
                DrawRect(page, 300, 670, "Fill then Stroke")
                page.FillStroke()
                page.GSave()
                DrawRect(page, 300, 620, "Clip Rectangle")
                page.Clip()
                page.Stroke()
                page.SetFontAndSize(font, 13)
                page.BeginText()
                page.MoveTextPos(290, 600)
                page.SetTextLeading(12)
                page.ShowText("Clip Clip Clip Clip Clip Clipi Clip Clip Clip")
                page.ShowTextNextLine("Clip Clip Clip Clip Clip Clip Clip Clip Clip")
                page.ShowTextNextLine("Clip Clip Clip Clip Clip Clip Clip Clip Clip")
                page.EndText()
                page.GRestore()
;               data x, float, 330
;               data y, float, 440
;               data x1, float, 430
;               data y1, float, 530
;               data x2, float, 480
;               data y2, float, 470
;               data x3, float, 480
;               data y3, float, 90
                page.SetRGBFill(0, 0, 0)
                page.BeginText()
                page.MoveTextPos(300, 540)
                page.ShowText("CurveTo2(x1, y1, x2. y2)")
                page.EndText()
                page.BeginText()
                page.MoveTextPos((x + 5), (y - 5))
                page.ShowText("Current point")
                page.MoveTextPos((x1 - x), (y1 - y))
                page.ShowText("(x1, y1)")
                page.MoveTextPos((x2 - x1), (y2 - y1))
                page.ShowText("(x2, y2)")
                page.EndText()
                page.SetDash(dash_mode1, 0)
                page.SetLineWidth(0.5)
                page.MoveTo(x1, y1)
                page.LineTo(x2, y2)
                page.Stroke()
                page.SetDash(^null, 0)
                page.SetLineWidth(1.5)
                page.MoveTo(x, y)
                page.CurveTo2(x1, y1, x2, y2)
                page.Stroke()
                y -= 150
                y1 -= 150
                y2 -= 150
                page.BeginText()
                page.MoveTextPos(300, 390)
                page.ShowText("CurveTo3(x1, y1, x2. y2)")
                page.EndText()
                page.BeginText()
                page.MoveTextPos((x + 5), (y - 5))
                page.ShowText("Current point")
                page.MoveTextPos((x1 - x), (y1 - y))
                page.ShowText("(x1, y1)")
                page.MoveTextPos((x2 - x1), (y2 - y1))
                page.ShowText("(x2, y2)")
                page.EndText()
                page.SetDash(dash_mode1, 0)
                page.SetLineWidth(0.5)
                page.MoveTo(x, y)
                page.LineTo(x1, y1)
                page.Stroke()
                page.SetDash(^null, 0)
                page.SetLineWidth(1.5)
                page.MoveTo(x, y)
                page.CurveTo3(x1, y1, x2, y2)
                page.Stroke()
                y -= 150
                y1 -= 160
                y2 -= 130
                x2 += 10
                page.BeginText()
                page.MoveTextPos(300, 240)
                page.ShowText("CurveTo(x1, y1, x2. y2, x3, y3)")
                page.EndText()
                page.BeginText()
                page.MoveTextPos((x + 5), (y - 5))
                page.ShowText("Current point")
                page.MoveTextPos((x1 - x), (y1 - y))
                page.ShowText("(x1, y1)")
                page.MoveTextPos((x2 - x1), (y2 - y1))
                page.ShowText("(x2, y2)")
                page.MoveTextPos((x3 - x2), (y3 - y2))
                page.ShowText("(x3, y3)")
                page.EndText()
                page.SetDash(dash_mode1, 0)
                page.SetLineWidth(0.5)
                page.MoveTo(x, y)
                page.LineTo(x1, y1)
                page.Stroke()
                page.MoveTo(x2, y2)
                page.LineTo(x3, y3)
                page.Stroke()
                page.SetDash(^null, 0)
                page.SetLineWidth(1.5)
                page.MoveTo(x, y)
                page.CurveTo(x1, y1, x2, y2, x3, y3)
                page.Stroke()
                pdf.SaveToFile("LineDemo.pdf")
            end
            catch (e, @Exception)
            begin
                writes(15,e.Message)
            end
            endtry
        end
    endmethod
endclass
endnamespace
;; 
;;  * << Haru Free PDF Library 2.0.5 >> -- LineDemo.cs
;;  *
;;  * Copyright (c) 1999-2006 Takeshi Kanno <takeshi_kanno@est.hi-ho.ne.jp>
;;  *
;;  * Permission to use, copy, modify, distribute and sell this software
;;  * and its documentation for any purpose is hereby granted without fee,
;;  * provided that the above copyright notice appear in all copies and
;;  * that both that copyright notice and this permission notice appear
;;  * in supporting documentation.
;;  * It is provided "as is" without express or implied warranty.
;;  *
;;  */
;;  create default-font */
;;  add a new page object. */
;;  print the lines of the page. */
;;  print the title of the page (with positioning center). */
;;  Draw verious widths of lines. */
;;  Line dash pattern */
;;  Line Cap Style */
;;  Line Join Style */
;;  Draw Rectangle */
;;  Clip Rect */
;;  Save the current graphic state */
;;  Curve Example(CurveTo2) */
;;  Curve Example(CurveTo3) */
;;  Curve Example(CurveTo) */

.main
;record
;	hnd,	@LineDemo
.proc
	open(15,o,'tt:')
	LineDemo.Main()
.end
